{
    "contents" : "#'Find the nearest ChIP-seq binding site to each gene in a GTF file with chromatin weighting\n#' @param ChIP A dataframe containing ChIP-seq peak information in bed format. At least three columns indicating chromosome, start position, and stop position for each binding site.\n#' @param GTF A dataframe containing gene location information in Gene Transfer Format (GTF).\n#' Function expects nine columns with chromosome in column 1, gene start and stop postion in columns 4 and 5, strand information in column 6, and gene ID information in column 9.\n#' Ensure only rows corresponding to unique genes are included and chromosome column is formatted identically to ChIP-seq file.\n#' @param Genes A vector of gene IDs to which the package will calculate the nearest ChiP-seq binding distance. If NULL, all genes present in the provided GTF file will be used. Defaults to NULL.\n#' @param TAD A dataframe containing TAD boundaries with at least 3 columns containing chromosome, start position, and stop position of each TAD. Defaults to NULL.\n#' @param TAD_Penalty A numeric indicating the distance penalty to put on binding sites that fall outside a genes TAD. Only used if a TAD boundary File is provided. Defaults to 100\n#' @param PCHC A dataframe containing promoter looping information. The function expects a 5 column data frame with the bait gene ENSEMBL ID, the capture chromsome, capture start position, capture stop position, and an interaction frequencing metric.\n#' Ensure the capture chromosome column is formatted identically to the ChIP file. Defaults to NULL\n#' @param PCHC_Bonus A numeric indicating the reward to provide to ChIP peaks falling in regions that loop into a gene's promoter. Only used if a PCHC file is provided. Defaults to 100.\n#' @param numCores A numeric indicating the number of cores the function can use via R's parallel package. Defaults to 4.\n#' @export\n#' @import parallel\n#' @import GenomicRanges\n#' @import IRanges\n#' @return Returns a dataframe with two columns. The first is the ENSEMBL gene ID and the second is the distance to the nearest ChIP-seq binding site.\n#' @examples\n#'data(\"GM12878_BATF_ChIP\")\n#'data(\"Homo_sapiens.GRCh37.82.chr.gtf\")\n#'DistanceFrame<-GeneToPeakDist(ChIP = ChIP, Genes = c(\"ENSG00000186092\", \"ENSG00000237683\", \"ENSG00000235249\"))\n#'\n#' @note\n#' #Citations:\n#'\n\nGeneToPeakDist<-function(ChIP, GTF, Genes=NULL, TAD=NULL, TAD_Penalty=100, PCHC=NULL, PCHC_Bonus=100, numCores=4){\n\n  #Parse ENSEMBL IDs from GTF\n  GTF[,\"Gene\"]<-substr(gsub(\"^.+ENSG\",\"ENSG\",GTF[,9]),1,15)\n\n  if(is.null(Genes)){\n    Genes<-GTF$Gene\n  }\n\n  #Find all genes of interest in GTF file\n  allGeneLoc<-GTF[which(GTF$Gene%in%Genes),]\n\n  #Create empty list to store all gene-peak distances\n  allGeneList<-list()\n\n  #Loop through each chromosome of chip bed file\n  for(chromosome in unique(ChIP[,1])){\n\n    #Find all positive strand genes\n    allGeneLocPos<-allGeneLoc[which(allGeneLoc[,7]==\"+\"),]\n\n    #Find all genes on current chromosome\n    currentChrGenes<-allGeneLocPos[which(allGeneLocPos$V1==chromosome),]\n\n    if(sum(allGeneLocPos$V1==chromosome)>0){\n\n      #Find all peaks on current chromosome\n      currentChrChip<-ChIP[which(ChIP[,1]==chromosome),]\n\n      if(!is.null(TAD)){\n\n        #Find TADS on current chromosome\n        currentChrTAD<-TAD[which(TAD[,1]==chromosome),]\n\n        #Calculate distance from gene to nearest peak (start and stop) for each gene on chromosome\n        currentGeneFrame<-data.frame(\"LeftChip\"=unlist(parallel::mclapply(currentChrGenes[,4], function(x) min((currentChrChip[,2]-x)[which((currentChrChip[,2]-x)>(currentChrChip[,2]-currentChrChip[,3]))]),mc.cores = numCores)),\n                                     \"LeftTAD\"=unlist(parallel::mclapply(currentChrGenes[,4], function(x) min((c(currentChrTAD[,3],currentChrTAD[,2])-x)[which((c(currentChrTAD[,3],currentChrTAD[,2])-x)>0)]),mc.cores = numCores)),\n                                     \"RightChip\"=unlist(parallel::mclapply(currentChrGenes[,4], function(x) max((currentChrChip[,3]-x)[which((currentChrChip[,3]-x)<0)]),mc.cores = numCores)),\n                                     \"RightTAD\"=unlist(parallel::mclapply(currentChrGenes[,4], function(x) max((c(currentChrTAD[,3],currentChrTAD[,2])-x)[which((c(currentChrTAD[,3],currentChrTAD[,2])-x)<0)]),mc.cores = numCores)))\n        #Convert hanging dists to NA\n        for(i in 1:4){currentGeneFrame[grep(\"Inf|-Inf\",currentGeneFrame[,i]),i]<-NA}\n        #Convert overlapping TSSs to zero\n        currentGeneFrame[which(currentGeneFrame[,1]<0),]<-0\n\n        #Add TAD boundary if applicable\n        currentGeneFrame[which(!is.na(currentGeneFrame[,1])&currentGeneFrame[,1]>currentGeneFrame[,2]),1]<-currentGeneFrame[which(!is.na(currentGeneFrame[,1])&currentGeneFrame[,1]>currentGeneFrame[,2]),1]*TAD_Penalty\n        currentGeneFrame[which(!is.na(currentGeneFrame[,3])&currentGeneFrame[,3]<currentGeneFrame[,4]),3]<-currentGeneFrame[which(!is.na(currentGeneFrame[,3])&currentGeneFrame[,3]<currentGeneFrame[,4]),3]*TAD_Penalty\n        #Find closest binding site post-TAD\n        posGeneFrame<-cbind(currentChrGenes[,\"Gene\"],apply(currentGeneFrame[,c(1,3)],1,function(x) min(abs(x),na.rm=T)))\n      }\n      if(is.null(TAD)){\n        #Calculate distance from gene to nearest peak (start and stop) for each gene on chromosome\n        currentGeneFrame<-data.frame(\"LeftChip\"=unlist(parallel::mclapply(currentChrGenes[,4], function(x) min((currentChrChip[,2]-x)[which((currentChrChip[,2]-x)>(currentChrChip[,2]-currentChrChip[,3]))]),mc.cores = numCores)),\n                                     \"RightChip\"=unlist(parallel::mclapply(currentChrGenes[,4], function(x) max((currentChrChip[,3]-x)[which((currentChrChip[,3]-x)<0)]),mc.cores = numCores)))\n        #Convert hanging dists to NA\n        for(i in 1:2){currentGeneFrame[grep(\"Inf|-Inf\",currentGeneFrame[,i]),i]<-NA}\n        #Convert overlapping TSSs to zero\n        currentGeneFrame[which(currentGeneFrame[,1]<0),]<-0\n        #Convert peak distances to gene frame and find minimum distance (peak start or stop)\n        posGeneFrame<-cbind(currentChrGenes[,\"Gene\"],apply(currentGeneFrame[,c(1,2)],1,function(x) min(abs(x),na.rm=T)))\n      }\n      #Add to master distance list\n      colnames(posGeneFrame)<-c(1:2)\n\n      #Add to master distance list\n      allGeneList[[paste0(chromosome,\"+\")]]<-posGeneFrame\n    }\n\n    #Find all negative strand genes\n    allGeneLocNeg<-allGeneLoc[which(allGeneLoc$V7==\"-\"),]\n\n    #Find all genes on current chromosome\n    currentChrGenes<-allGeneLocNeg[which(allGeneLocNeg$V1==chromosome),]\n    if(sum(allGeneLocNeg$V1==chromosome)>0){\n\n      #Find all peaks on current chromosome\n      currentChrChip<-ChIP[which(ChIP[,1]==chromosome),]\n      if(!is.null(TAD)){\n        #Find TADS on current chromosome\n        currentChrTAD<-TAD[which(TAD[,1]==chromosome),]\n\n        #Calculate distance from gene to nearest peak (start and stop) for each gene on chromosome\n        currentGeneFrame<-data.frame(\"LeftChip\"=unlist(parallel::mclapply(currentChrGenes[,5], function(x) min((currentChrChip[,2]-x)[which((currentChrChip[,2]-x)>(currentChrChip[,2]-currentChrChip[,3]))]),mc.cores = numCores)),\n                                     \"LeftTAD\"=unlist(parallel::mclapply(currentChrGenes[,5], function(x) min((c(currentChrTAD[,3],currentChrTAD[,2])-x)[which((c(currentChrTAD[,3],currentChrTAD[,2])-x)>0)]),mc.cores = numCores)),\n                                     \"RightChip\"=unlist(parallel::mclapply(currentChrGenes[,5], function(x) max((currentChrChip[,3]-x)[which((currentChrChip[,3]-x)<0)]),mc.cores = numCores)),\n                                     \"RightTAD\"=unlist(parallel::mclapply(currentChrGenes[,5], function(x) max((c(currentChrTAD[,3],currentChrTAD[,2])-x)[which((c(currentChrTAD[,3],currentChrTAD[,2])-x)<0)]),mc.cores = numCores)))\n        #Convert hanging dists to NA\n        for(i in 1:4){currentGeneFrame[grep(\"Inf|-Inf\",currentGeneFrame[,i]),i]<-NA}\n        #Convert overlapping TSSs to zero\n        currentGeneFrame[which(currentGeneFrame[,1]<0),]<-0\n\n        #Add TAD boundary if applicable\n        currentGeneFrame[which(!is.na(currentGeneFrame[,1])&currentGeneFrame[,1]>currentGeneFrame[,2]),1]<-currentGeneFrame[which(!is.na(currentGeneFrame[,1])&currentGeneFrame[,1]>currentGeneFrame[,2]),1]*TAD_Penalty\n        currentGeneFrame[which(!is.na(currentGeneFrame[,3])&currentGeneFrame[,3]<currentGeneFrame[,4]),3]<-currentGeneFrame[which(!is.na(currentGeneFrame[,3])&currentGeneFrame[,3]<currentGeneFrame[,4]),3]*TAD_Penalty\n        #Find closest binding site post-TAD\n        negGeneFrame<-cbind(currentChrGenes[,\"Gene\"],apply(currentGeneFrame[,c(1,3)],1,function(x) min(abs(x),na.rm=T)))\n      }\n      if(is.null(TAD)){\n        #Calculate distance from gene to nearest peak (start and stop) for each gene on chromosome\n        #Calculate distance from gene to nearest peak (start and stop) for each gene on chromosome\n        currentGeneFrame<-data.frame(\"LeftChip\"=unlist(parallel::mclapply(currentChrGenes[,5], function(x) min((currentChrChip[,2]-x)[which((currentChrChip[,2]-x)>(currentChrChip[,2]-currentChrChip[,3]))]),mc.cores = numCores)),\n                                     \"RightChip\"=unlist(parallel::mclapply(currentChrGenes[,5], function(x) max((currentChrChip[,3]-x)[which((currentChrChip[,3]-x)<0)]),mc.cores = numCores)))\n        #Convert hanging dists to NA\n        for(i in 1:2){currentGeneFrame[grep(\"Inf|-Inf\",currentGeneFrame[,i]),i]<-NA}\n        #Convert overlapping TSSs to zero\n        currentGeneFrame[which(currentGeneFrame[,1]<0),]<-0\n        #Find closest binding site post-TAD\n        negGeneFrame<-cbind(currentChrGenes[,\"Gene\"],apply(currentGeneFrame[,c(1,2)],1,function(x) min(abs(x),na.rm=T)))\n      }\n      #Add to master distance list\n      colnames(negGeneFrame)<-c(1:2)\n\n      #Add to master distance list\n      allGeneList[[paste0(chromosome,\"-\")]]<-negGeneFrame\n    }\n  }\n\n  #Bind distance into data frame add column names and return\n  allGeneFrame<-data.frame(do.call(rbind, allGeneList))\n  colnames(allGeneFrame)<-c(\"GeneID\",\"Distance (bp)\")\n  allGeneFrame[,2]<-as.numeric(as.character(allGeneFrame[,2]))\n\n  if(!is.null(PCHC)){\n    #Find chip sites that fall in a PCHC region\n    PCHC_bed <- GenomicRanges::GRanges(PCHC[,1], IRanges::IRanges(PCHC[,2], PCHC[,3]), strand=rep(\"+\",nrow(PCHC)), PCHC[,4], id=PCHC[,5])\n    ChIP_bed <- GenomicRanges::GRanges(ChIP[,1], IRanges::IRanges(ChIP[,2], ChIP[,3]), strand=rep(\"+\",nrow(ChIP)), id=row.names(ChIP))\n    bedIntersect <- GenomicRanges::findOverlaps(PCHC_bed,ChIP_bed)\n    overlapFrame<-cbind(ChIP[bedIntersect@subjectHits,1:3],ExtendFrame[bedIntersect@queryHits,])\n    #Compute loop bonus distance\n    overlapFrame[,8]<-as.character(overlapFrame[,8])\n    overlapFrame<-overlapFrame[which(overlapFrame[,8]%in%allGeneFrame[,1]),]\n    row.names(GTF)<-GTF$Gene\n    GTF_PCHC_Filt<-GTF[overlapFrame[,8],]\n    overlapFrame[,9]<-rep(NA,nrow(overlapFrame))\n    overlapFrame[which(GTF_PCHC_Filt[,7]==\"+\"),9]<-apply(cbind(overlapFrame[which(GTF_PCHC_Filt[,7]==\"+\"),2]-GTF_PCHC_Filt[which(GTF_PCHC_Filt[,7]==\"+\"),4],\n                                                               overlapFrame[which(GTF_PCHC_Filt[,7]==\"+\"),3]-GTF_PCHC_Filt[which(GTF_PCHC_Filt[,7]==\"+\"),4]),1,function(x) min(abs(x)))\n\n    overlapFrame[which(GTF_PCHC_Filt[,7]==\"-\"),9]<-apply(cbind(overlapFrame[which(GTF_PCHC_Filt[,7]==\"-\"),2]-GTF_PCHC_Filt[which(GTF_PCHC_Filt[,7]==\"-\"),5],\n                                                               overlapFrame[which(GTF_PCHC_Filt[,7]==\"-\"),3]-GTF_PCHC_Filt[which(GTF_PCHC_Filt[,7]==\"-\"),5]),1,function(x) min(abs(x)))\n    overlapFrame[,9]<-overlapFrame[,9]/(1+overlapFrame[,7]*PCHC_Bonus)\n    #Find shortest distance with loop bonus\n    overlapFrame<-overlapFrame[order(overlapFrame[,9]),]\n    overlapFrame<-overlapFrame[which(!duplicated(overlapFrame[,8])),]\n    #Convert previously computed distance to loop bonus distance if smaller\n    row.names(allGeneFrame)<-allGeneFrame[,1]\n    allGeneFrame_PCHC_Filt<-allGeneFrame[overlapFrame[,8],]\n    allGeneFrame_PCHC_Filt[which(allGeneFrame_PCHC_Filt[,2]>overlapFrame[,9]),2]<-overlapFrame[which(allGeneFrame_PCHC_Filt[,2]>overlapFrame[,9]),9]\n    allGeneFrame<-rbind(allGeneFrame[which(!allGeneFrame[,1]%in%overlapFrame[,8]),],allGeneFrame_PCHC_Filt)\n    row.names(allGeneFrame)<-1:nrow(allGeneFrame)\n  }\n  return(allGeneFrame)\n}\n",
    "created" : 1494345647439.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2110308984",
    "id" : "E5D416D3",
    "lastKnownWriteTime" : 1494430773,
    "path" : "~/Desktop/GRNF/R/GeneToPeakDist.R",
    "project_path" : "R/GeneToPeakDist.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 3,
    "source_on_save" : false,
    "type" : "r_source"
}