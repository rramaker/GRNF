{
    "contents" : "library(data.table)\nlibrary(parallel)\nlibrary(GenomicRanges)\n\n\n\n####File Parse\nGTF<-fread(\"/Volumes/RCR/Liver_interactome/Final_Analysis/Homo_sapiens.GRCh37.82.chr.gtf\",sep=\"\\t\", stringsAsFactors = F)\nGTF<-data.frame(GTF,stringsAsFactors = F)\nGTF<-GTF[which(GTF[,3]==\"gene\"),]\nGTF<-GTF[grep(\"protein_coding\", GTF[,9]),]\nGTF[,1]<-paste0(\"chr\",GTF[,1])\nsave(GTF, file = \"~/Desktop/GRNF/Data/Homo_sapiens.GRCh37.82.chr.gtf.RData\")\n\nChIP<-read.table(\"/Volumes/RCR/GRN_Pred/TF_ChIPs/BATF.bed\",sep=\"\\t\",stringsAsFactors = F)\nsave(ChIP, file=\"~/Desktop/GRNF/data/GM12878_BATF_ChIP.RData\")\nAllGenes<-Genes<-gsub('\";.+$','',gsub(\"^.+ENSG\",\"ENSG\",GTF[,9]))\n\n#TAD<-read.table(\"/Volumes/RCR/GRN_Pred/GM12878_TAD.txt\")\nTAD<-read.table(\"/Volumes/RCR/GRN_Pred/TAD_definitions/TADs_nB_mean_merged.bed\",sep=\"\\t\",stringsAsFactors = F,header=T)\nTAD[,1]<-paste0(\"chr\",TAD[,1])\nsave(TAD, file=\"~/Desktop/GRNF/data/GM12878_TAD.RData\")\n\nPHIC<-fread(\"/Volumes/RCR/E-MTAB-2323.additional.1/TS5_GM12878_promoter-other_significant_interactions.txt\",sep=\"\\t\",header=T,stringsAsFactors = F)\nPHIC<-data.frame(PHIC)\nPHIC<-PHIC[which(PHIC$chr.bait==PHIC$chr),]\nGeneSplit<-strsplit(PHIC[,\"Ensembl.Gene.ID\"],\"\\\\|\")\nGeneSplitLength<-lapply(GeneSplit,length)\nExtendFrame<-data.frame(\"BaitGene\"=unlist(GeneSplit),\n                        \"CaptureChr\"=rep(PHIC$chr,times=unlist(GeneSplitLength)),\n                        \"CaptureStart\"=rep(PHIC$start,times=unlist(GeneSplitLength)),\n                        \"CaptureEnd\"=rep(PHIC$end,times=unlist(GeneSplitLength)),\n                        \"CaptureScore\"=rep(PHIC$log.observed.expected.,times=unlist(GeneSplitLength)))\nExtendFrame<-ExtendFrame[,c(2:5,1)]\nwrite.table(ExtendFrame,\"/Volumes/RCR/GRN_Pred/GM12878_PrichPHIC.txt\",sep=\"\\t\",col.names=F, row.names = F, quote=F)\nPCHC<-read.table(\"/Volumes/RCR/GRN_Pred/GM12878_PrichPHIC.txt\",sep=\"\\t\")\nsave(PCHC, file=\"~/Desktop/GRNF/data/GM12878_PCHC.RData\")\n\nPHIC2<-fread(\"/Volumes/RCR/GRN_Pred/PCHiC_peak_matrix_cutoff5.txt\")\nPHIC2<-data.frame(PHIC2)\nPHIC2<-PHIC2[which(PHIC2$baitChr==PHIC2$oeChr),]\nPHIC2$oeChr<-paste0(\"chr\",PHIC2$oeChr)\nGeneSplit<-strsplit(PHIC2[,5],\";\")\nGeneSplitLength<-lapply(GeneSplit,length)\nExtendFrame<-data.frame(\"BaitGene\"=unlist(GeneSplit),\n                        \"CaptureChr\"=rep(PHIC2$oeChr,times=unlist(GeneSplitLength)),\n                        \"CaptureStart\"=rep(PHIC2$oeStart,times=unlist(GeneSplitLength)),\n                        \"CaptureEnd\"=rep(PHIC2$oeEnd,times=unlist(GeneSplitLength)),\n                        \"CaptureScore\"=rep(PHIC2$nB,times=unlist(GeneSplitLength)))\nExtendFrame<-ExtendFrame[,c(2:5,1)]\n\nGeneToPeakDist4<-function(ChIP, GTF, Genes, TAD=NULL, TAD_Penalty=100, PCHC=NULL, PCHC_Bonus=100, numCores=4){\n  #Parse ENSEMBL IDs from GTF\n  GTF[,\"Gene\"]<-gsub('\";.+$','',gsub(\"^.+ENSG\",\"ENSG\",GTF[,9]))\n\n  #Find all genes of interest in GTF file\n  allGeneLoc<-GTF[which(GTF$Gene%in%Genes),]\n\n  #Create empty list to store all gene-peak distances\n  allGeneList<-list()\n\n  #Loop through each chromosome of chip bed file\n  for(chromosome in unique(ChIP[,1])){\n\n    #Find all positive strand genes\n    allGeneLocPos<-allGeneLoc[which(allGeneLoc[,7]==\"+\"),]\n\n    #Find all genes on current chromosome\n    currentChrGenes<-allGeneLocPos[which(allGeneLocPos$V1==chromosome),]\n\n    if(nrow(currentChrGenes)>0){\n\n      #Find all peaks on current chromosome\n      currentChrChip<-ChIP[which(ChIP[,1]==chromosome),]\n\n      if(!is.null(TAD)){\n\n        #Find TADS on current chromosome\n        currentChrTAD<-TAD[which(TAD[,1]==chromosome),]\n\n        #Calculate distance from gene to nearest peak (start and stop) for each gene on chromosome\n        currentGeneFrame<-data.frame(\"LeftChip\"=unlist(mclapply(currentChrGenes[,4], function(x) min((currentChrChip[,2]-x)[which((currentChrChip[,2]-x)>(currentChrChip[,2]-currentChrChip[,3]))]),mc.cores = numCores)),\n                                     \"LeftTAD\"=unlist(mclapply(currentChrGenes[,4], function(x) min((c(currentChrTAD[,3],currentChrTAD[,2])-x)[which((c(currentChrTAD[,3],currentChrTAD[,2])-x)>0)]),mc.cores = numCores)),\n                                     \"RightChip\"=unlist(mclapply(currentChrGenes[,4], function(x) max((currentChrChip[,3]-x)[which((currentChrChip[,3]-x)<0)]),mc.cores = numCores)),\n                                     \"RightTAD\"=unlist(mclapply(currentChrGenes[,4], function(x) max((c(currentChrTAD[,3],currentChrTAD[,2])-x)[which((c(currentChrTAD[,3],currentChrTAD[,2])-x)<0)]),mc.cores = numCores)))\n        #Convert hanging dists to NA\n        for(i in 1:4){currentGeneFrame[grep(\"Inf|-Inf\",currentGeneFrame[,i]),i]<-NA}\n        #Convert overlapping TSSs to zero\n        currentGeneFrame[which(currentGeneFrame[,1]<0),]<-0\n\n        #Add TAD boundary if applicable\n        currentGeneFrame[which(!is.na(currentGeneFrame[,1])&currentGeneFrame[,1]>currentGeneFrame[,2]),1]<-currentGeneFrame[which(!is.na(currentGeneFrame[,1])&currentGeneFrame[,1]>currentGeneFrame[,2]),1]*TAD_Penalty\n        currentGeneFrame[which(!is.na(currentGeneFrame[,3])&currentGeneFrame[,3]<currentGeneFrame[,4]),3]<-currentGeneFrame[which(!is.na(currentGeneFrame[,3])&currentGeneFrame[,3]<currentGeneFrame[,4]),3]*TAD_Penalty\n        #Find closest binding site post-TAD\n        posGeneFrame<-cbind(currentChrGenes[,\"Gene\"],apply(currentGeneFrame[,c(1,3)],1,function(x) min(abs(x),na.rm=T)))\n      }\n      if(is.null(TAD)){\n        #Calculate distance from gene to nearest peak (start and stop) for each gene on chromosome\n        currentGeneFrame<-data.frame(\"LeftChip\"=unlist(mclapply(currentChrGenes[,4], function(x) min((currentChrChip[,2]-x)[which((currentChrChip[,2]-x)>(currentChrChip[,2]-currentChrChip[,3]))]),mc.cores = numCores)),\n                                     \"RightChip\"=unlist(mclapply(currentChrGenes[,4], function(x) max((currentChrChip[,3]-x)[which((currentChrChip[,3]-x)<0)]),mc.cores = numCores)))\n        #Convert hanging dists to NA\n        for(i in 1:2){currentGeneFrame[grep(\"Inf|-Inf\",currentGeneFrame[,i]),i]<-NA}\n        #Convert overlapping TSSs to zero\n        currentGeneFrame[which(currentGeneFrame[,1]<0),]<-0\n        #Convert peak distances to gene frame and find minimum distance (peak start or stop)\n        posGeneFrame<-cbind(currentChrGenes[,\"Gene\"],apply(currentGeneFrame[,c(1,2)],1,function(x) min(abs(x),na.rm=T)))\n      }\n      #Add to master distance list\n      colnames(posGeneFrame)<-c(1:2)\n\n      #Add to master distance list\n      allGeneList[[paste0(chromosome,\"+\")]]<-posGeneFrame\n    }\n\n    #Find all negative strand genes\n    allGeneLocNeg<-allGeneLoc[which(allGeneLoc$V7==\"-\"),]\n\n    #Find all genes on current chromosome\n    currentChrGenes<-allGeneLocNeg[which(allGeneLocNeg$V1==chromosome),]\n    if(nrow(currentChrGenes)>0){\n\n      #Find all peaks on current chromosome\n      currentChrChip<-ChIP[which(ChIP[,1]==chromosome),]\n      if(!is.null(TAD)){\n        #Find TADS on current chromosome\n        currentChrTAD<-TAD[which(TAD[,1]==chromosome),]\n\n        #Calculate distance from gene to nearest peak (start and stop) for each gene on chromosome\n        currentGeneFrame<-data.frame(\"LeftChip\"=unlist(mclapply(currentChrGenes[,5], function(x) min((currentChrChip[,2]-x)[which((currentChrChip[,2]-x)>(currentChrChip[,2]-currentChrChip[,3]))]),mc.cores = numCores)),\n                                     \"LeftTAD\"=unlist(mclapply(currentChrGenes[,5], function(x) min((c(currentChrTAD[,3],currentChrTAD[,2])-x)[which((c(currentChrTAD[,3],currentChrTAD[,2])-x)>0)]),mc.cores = numCores)),\n                                     \"RightChip\"=unlist(mclapply(currentChrGenes[,5], function(x) max((currentChrChip[,3]-x)[which((currentChrChip[,3]-x)<0)]),mc.cores = numCores)),\n                                     \"RightTAD\"=unlist(mclapply(currentChrGenes[,5], function(x) max((c(currentChrTAD[,3],currentChrTAD[,2])-x)[which((c(currentChrTAD[,3],currentChrTAD[,2])-x)<0)]),mc.cores = numCores)))\n        #Convert hanging dists to NA\n        for(i in 1:4){currentGeneFrame[grep(\"Inf|-Inf\",currentGeneFrame[,i]),i]<-NA}\n        #Convert overlapping TSSs to zero\n        currentGeneFrame[which(currentGeneFrame[,1]<0),]<-0\n\n        #Add TAD boundary if applicable\n        currentGeneFrame[which(!is.na(currentGeneFrame[,1])&currentGeneFrame[,1]>currentGeneFrame[,2]),1]<-currentGeneFrame[which(!is.na(currentGeneFrame[,1])&currentGeneFrame[,1]>currentGeneFrame[,2]),1]*TAD_Penalty\n        currentGeneFrame[which(!is.na(currentGeneFrame[,3])&currentGeneFrame[,3]<currentGeneFrame[,4]),3]<-currentGeneFrame[which(!is.na(currentGeneFrame[,3])&currentGeneFrame[,3]<currentGeneFrame[,4]),3]*TAD_Penalty\n        #Find closest binding site post-TAD\n        negGeneFrame<-cbind(currentChrGenes[,\"Gene\"],apply(currentGeneFrame[,c(1,3)],1,function(x) min(abs(x),na.rm=T)))\n      }\n      if(is.null(TAD)){\n        #Calculate distance from gene to nearest peak (start and stop) for each gene on chromosome\n        #Calculate distance from gene to nearest peak (start and stop) for each gene on chromosome\n        currentGeneFrame<-data.frame(\"LeftChip\"=unlist(mclapply(currentChrGenes[,5], function(x) min((currentChrChip[,2]-x)[which((currentChrChip[,2]-x)>(currentChrChip[,2]-currentChrChip[,3]))]),mc.cores = numCores)),\n                                     \"RightChip\"=unlist(mclapply(currentChrGenes[,5], function(x) max((currentChrChip[,3]-x)[which((currentChrChip[,3]-x)<0)]),mc.cores = numCores)))\n        #Convert hanging dists to NA\n        for(i in 1:2){currentGeneFrame[grep(\"Inf|-Inf\",currentGeneFrame[,i]),i]<-NA}\n        #Convert overlapping TSSs to zero\n        currentGeneFrame[which(currentGeneFrame[,1]<0),]<-0\n        #Find closest binding site post-TAD\n        negGeneFrame<-cbind(currentChrGenes[,\"Gene\"],apply(currentGeneFrame[,c(1,2)],1,function(x) min(abs(x),na.rm=T)))\n      }\n      #Add to master distance list\n      colnames(negGeneFrame)<-c(1:2)\n\n      #Add to master distance list\n      allGeneList[[paste0(chromosome,\"-\")]]<-negGeneFrame\n    }\n  }\n\n  #Bind distance into data frame add column names and return\n  allGeneFrame<-data.frame(do.call(rbind, allGeneList))\n  colnames(allGeneFrame)<-c(\"GeneID\",\"Distance (bp)\")\n  allGeneFrame[,2]<-as.numeric(as.character(allGeneFrame[,2]))\n\n  if(!is.null(PCHC)){\n    #Find chip sites that fall in a PCHC region\n    PCHC_bed <- GRanges(PCHC[,1], IRanges(PCHC[,2], PCHC[,3]), strand=rep(\"+\",nrow(PCHC)), PCHC[,4], id=PCHC[,5])\n    ChIP_bed <- GRanges(ChIP[,1], IRanges(ChIP[,2], ChIP[,3]), strand=rep(\"+\",nrow(ChIP)), id=row.names(ChIP))\n    bedIntersect <- GenomicRanges::findOverlaps(PCHC_bed,ChIP_bed)\n    overlapFrame<-cbind(ChIP[bedIntersect@subjectHits,1:3],ExtendFrame[bedIntersect@queryHits,])\n    #Compute loop bonus distance\n    overlapFrame[,8]<-as.character(overlapFrame[,8])\n    overlapFrame<-overlapFrame[which(overlapFrame[,8]%in%allGeneFrame[,1]),]\n    row.names(GTF)<-GTF$Gene\n    GTF_PCHC_Filt<-GTF[overlapFrame[,8],]\n    overlapFrame[,9]<-rep(NA,nrow(overlapFrame))\n    overlapFrame[which(GTF_PCHC_Filt[,7]==\"+\"),9]<-apply(cbind(overlapFrame[which(GTF_PCHC_Filt[,7]==\"+\"),2]-GTF_PCHC_Filt[which(GTF_PCHC_Filt[,7]==\"+\"),4],\n                                                               overlapFrame[which(GTF_PCHC_Filt[,7]==\"+\"),3]-GTF_PCHC_Filt[which(GTF_PCHC_Filt[,7]==\"+\"),4]),1,function(x) min(abs(x)))\n\n    overlapFrame[which(GTF_PCHC_Filt[,7]==\"-\"),9]<-apply(cbind(overlapFrame[which(GTF_PCHC_Filt[,7]==\"-\"),2]-GTF_PCHC_Filt[which(GTF_PCHC_Filt[,7]==\"-\"),5],\n                                                               overlapFrame[which(GTF_PCHC_Filt[,7]==\"-\"),3]-GTF_PCHC_Filt[which(GTF_PCHC_Filt[,7]==\"-\"),5]),1,function(x) min(abs(x)))\n    overlapFrame[,9]<-overlapFrame[,9]/(1+overlapFrame[,7]*PCHC_Bonus)\n    #Find shortest distance with loop bonus\n    overlapFrame<-overlapFrame[order(overlapFrame[,9]),]\n    overlapFrame<-overlapFrame[which(!duplicated(overlapFrame[,8])),]\n    #Convert previously computed distance to loop bonus distance if smaller\n    row.names(allGeneFrame)<-allGeneFrame[,1]\n    allGeneFrame_PCHC_Filt<-allGeneFrame[overlapFrame[,8],]\n    allGeneFrame_PCHC_Filt[which(allGeneFrame_PCHC_Filt[,2]>overlapFrame[,9]),2]<-overlapFrame[which(allGeneFrame_PCHC_Filt[,2]>overlapFrame[,9]),9]\n    allGeneFrame<-rbind(allGeneFrame[which(!allGeneFrame[,1]%in%overlapFrame[,8]),],allGeneFrame_PCHC_Filt)\n    row.names(allGeneFrame)<-1:nrow(allGeneFrame)\n  }\n  return(allGeneFrame)\n}\n\nx<-GeneToPeakDist4(ChIP=ChIP, GTF=GTF, Genes = AllGenes)\nrow.names(x)<-x[,1]\nx1<-GeneToPeakDist4(ChIP=ChIP, GTF=GTF, Genes = AllGenes, TAD = TAD_, TAD_Penalty = 1)\nx2<-GeneToPeakDist4(ChIP=ChIP, GTF=GTF, Genes = AllGenes, TAD = TAD_, TAD_Penalty = 1, PCHC = ExtendFrame, PCHC_Bonus = 0)\nrow.names(x1)<-x1[,1]\nrow.names(x2)<-x2[,1]\nx2<-x2[row.names(x1),]\nsum(x2[,2]!=x1[,2])\nhead(cbind(x1[which(x2[,2]!=x1[,2]),],x2[which(x2[,2]!=x1[,2]),]))\n\n\nPrichardData<-read.table(\"/Volumes/RCR/GRN_Pred/Prichard_PLOSGen.txt\",sep=\"\\t\", header=T, stringsAsFactors = F)\nTFs<-list.files(\"/Volumes/RCR/GRN_Pred/TF_ChIPs/\")\nDistOnlyList<-list()\nfor(TF in TFs){\n  print(TF)\n  TF_Frame<-read.table(paste0(\"/Volumes/RCR/GRN_Pred/TF_ChIPs/\",TF),sep=\"\\t\",stringsAsFactors = F)\n  PrichardDataFilt<-data.frame(PrichardData[,grep(gsub(\".bed\",\"\",TF),colnames(PrichardData))[1]],row.names=PrichardData[,2])\n  PrichardDataFilt<-PrichardDataFilt[which(!is.na(PrichardDataFilt[,1])),,drop=F]\n  DistOnlyList[[paste0(TF)]]<-GeneToPeakDist4(ChIP=TF_Frame, GTF=GTF, Genes = row.names(PrichardDataFilt))\n}\n\nTAD_Pen_List<-list()\nfor(Pen in c(1,10,100,1000,10000,100000,1000000)){\n  for(TF in TFs){\n    print(TF)\n    TF_Frame<-read.table(paste0(\"/Volumes/RCR/GRN_Pred/TF_ChIPs/\",TF),sep=\"\\t\",stringsAsFactors = F)\n    #PrichardDataFilt<-data.frame(PrichardData[,grep(gsub(\".bed\",\"\",TF),colnames(PrichardData))[1]],row.names=PrichardData[,2])\n    PrichardDataFilt<-data.frame(PrichardData[,grep(gsub(\".bed\",\"\",TF),colnames(PrichardData))[1]],row.names=PrichardData[,3])\n    PrichardDataFilt<-PrichardDataFilt[which(!is.na(PrichardDataFilt[,1])),,drop=F]\n    TAD_Pen_List[[paste0(TF,\"_\",Pen)]]<-GeneToPeakDist4(ChIP=TF_Frame, GTF=GTF, Genes = row.names(PrichardDataFilt), TAD=TAD,TAD_Penalty = Pen)\n  }\n}\n\nPCHC_Pen_List<-list()\nfor(Pen in c(0,1,10,100,1000,10000,100000)){\n  for(TF in TFs){\n    print(TF)\n    TF_Frame<-read.table(paste0(\"/Volumes/RCR/GRN_Pred/TF_ChIPs/\",TF),sep=\"\\t\",stringsAsFactors = F)\n    #PrichardDataFilt<-data.frame(PrichardData[,grep(gsub(\".bed\",\"\",TF),colnames(PrichardData))[1]],row.names=PrichardData[,2])\n    PrichardDataFilt<-data.frame(PrichardData[,grep(gsub(\".bed\",\"\",TF),colnames(PrichardData))[1]],row.names=PrichardData[,3])\n    PrichardDataFilt<-PrichardDataFilt[which(!is.na(PrichardDataFilt[,1])),,drop=F]\n    PCHC_Pen_List[[paste0(TF,\"_\",Pen)]]<-GeneToPeakDist4(ChIP=TF_Frame, GTF=GTF, Genes = row.names(PrichardDataFilt), PCHC=ExtendFrame,PCHC_Bonus = Pen)\n  }\n}\n\nPCHC_TAD_Combo_List<-list()\nfor(TF in TFs){\n  print(TF)\n  TF_Frame<-read.table(paste0(\"/Volumes/RCR/GRN_Pred/TF_ChIPs/\",TF),sep=\"\\t\",stringsAsFactors = F)\n  #PrichardDataFilt<-data.frame(PrichardData[,grep(gsub(\".bed\",\"\",TF),colnames(PrichardData))[1]],row.names=PrichardData[,2])\n  PrichardDataFilt<-data.frame(PrichardData[,grep(gsub(\".bed\",\"\",TF),colnames(PrichardData))[1]],row.names=PrichardData[,3])\n  PrichardDataFilt<-PrichardDataFilt[which(!is.na(PrichardDataFilt[,1])),,drop=F]\n  PCHC_TAD_Combo_List[[TF]]<-GeneToPeakDist4(ChIP=TF_Frame, GTF=GTF, Genes = row.names(PrichardDataFilt), PCHC=ExtendFrame,PCHC_Bonus = 100,TAD=TAD,TAD_Penalty = 100000)\n}\n\nsave(DistOnlyList,file=\"/Volumes/RCR/GRN_Pred/DistOnlyList_2.RData\")\nsave(TAD_Pen_List,file=\"/Volumes/RCR/GRN_Pred/TAD_Pen_List_2.RData\")\nsave(PCHC_Pen_List,file=\"/Volumes/RCR/GRN_Pred/PCHC_Pen_List_2.RData\")\nsave(PCHC_TAD_Combo_List,file=\"/Volumes/RCR/GRN_Pred/PCHC_TAD_Combo_List_2.RData\")\n\nfor(TF in names(DistOnlyList)){\n  PrichardDataFilt<-data.frame(PrichardData[,grep(gsub(\".bed\",\"\",TF),colnames(PrichardData))[1]],row.names=PrichardData[,2])\n  PrichardDataFilt<-PrichardDataFilt[which(!is.na(PrichardDataFilt[,1])),,drop=F]\n  row.names(DistOnlyList[[TF]])<- DistOnlyList[[TF]][,1]\n  PrichardDataFilt<- PrichardDataFilt[DistOnlyList[[TF]][,1],,drop=F]\n  DistOnlyList[[TF]]<-cbind(DistOnlyList[[TF]],PrichardDataFilt)\n}\nDistOnlyFrame<-do.call(rbind, DistOnlyList)\ncor.test(as.numeric(as.character(DistOnlyFrame[,2])),DistOnlyFrame[,3],method=\"spearman\")\n\nTAD_Pen_Res_List<-list()\nfor(Pen in c(1,10,100,1000,10000,100000,1000000)){\n  for(TF in names(TAD_Pen_List)[grep(paste0(\"_\",Pen,\"$\"),names(TAD_Pen_List))]){\n    #PrichardDataFilt<-data.frame(PrichardData[,grep(gsub(\".bed.+$\",\"\",TF),colnames(PrichardData))[1]],row.names=PrichardData[,2])\n    PrichardDataFilt<-data.frame(PrichardData[,grep(gsub(\".bed.+$\",\"\",TF),colnames(PrichardData))[1]],row.names=PrichardData[,3])\n    PrichardDataFilt<-PrichardDataFilt[which(!is.na(PrichardDataFilt[,1])),,drop=F]\n    #row.names(TAD_Pen_List[[TF]])<- TAD_Pen_List[[TF]][,1]\n    PrichardDataFilt<- PrichardDataFilt[as.character(TAD_Pen_List[[TF]][,1]),,drop=F]\n    TAD_Pen_List[[TF]]<-cbind(TAD_Pen_List[[TF]],PrichardDataFilt)\n  }\n  TAD_Pen_Res_List[[paste0(Pen)]]<-do.call(rbind, TAD_Pen_List[grep(paste0(\"_\",Pen,\"$\"),names(TAD_Pen_List))])\n}\nTAD_Cors<-unlist(lapply(TAD_Pen_Res_List,function(x) cor.test(as.numeric(as.character(x[,2])),x[,3],method=\"spearman\")$estimate))\n((TAD_Cors-TAD_Cors[1])/TAD_Cors[1])*100\n\nPCHC_Pen_Res_List<-list()\nfor(Pen in c(0,1,10,100,1000,10000,100000)){\n  for(TF in names(PCHC_Pen_List)[grep(paste0(\"_\",Pen,\"$\"),names(PCHC_Pen_List))]){\n    #PrichardDataFilt<-data.frame(PrichardData[,grep(gsub(\".bed.+$\",\"\",TF),colnames(PrichardData))[1]],row.names=PrichardData[,2])\n    PrichardDataFilt<-data.frame(PrichardData[,grep(gsub(\".bed.+$\",\"\",TF),colnames(PrichardData))[1]],row.names=PrichardData[,3])\n    PrichardDataFilt<-PrichardDataFilt[which(!is.na(PrichardDataFilt[,1])),,drop=F]\n    #row.names(PCHC_Pen_List[[TF]])<- PCHC_Pen_List[[TF]][,1]\n    PrichardDataFilt<- PrichardDataFilt[as.character(PCHC_Pen_List[[TF]][,1]),,drop=F]\n    PCHC_Pen_List[[TF]]<-cbind(PCHC_Pen_List[[TF]],PrichardDataFilt)\n  }\n  PCHC_Pen_Res_List[[paste0(Pen)]]<-do.call(rbind, PCHC_Pen_List[grep(paste0(\"_\",Pen,\"$\"),names(PCHC_Pen_List))])\n}\nPCHC_Cors<-unlist(lapply(PCHC_Pen_Res_List,function(x) cor.test(as.numeric(as.character(x[,2])),x[,3],method=\"spearman\")$estimate))\n((PCHC_Cors-PCHC_Cors[1])/PCHC_Cors[1])*100\n\nfor(TF in names(PCHC_TAD_Combo_List)){\n  PrichardDataFilt<-data.frame(PrichardData[,grep(gsub(\".bed\",\"\",TF),colnames(PrichardData))[1]],row.names=PrichardData[,2])\n  PrichardDataFilt<-PrichardDataFilt[which(!is.na(PrichardDataFilt[,1])),,drop=F]\n  row.names(PCHC_TAD_Combo_List[[TF]])<- PCHC_TAD_Combo_List[[TF]][,1]\n  PrichardDataFilt<- PrichardDataFilt[PCHC_TAD_Combo_List[[TF]][,1],,drop=F]\n  PCHC_TAD_Combo_List[[TF]]<-cbind(PCHC_TAD_Combo_List[[TF]],PrichardDataFilt)\n}\nPCHC_TAD_Combo_Fame<-do.call(rbind, PCHC_TAD_Combo_List)\n\nComboCor<-cor.test(as.numeric(as.character(PCHC_TAD_Combo_Fame[,2])),PCHC_TAD_Combo_Fame[,3],method=\"spearman\")$estimate\n\n((c(PCHC_Cors[-1],ComboCor)-PCHC_Cors[1])/PCHC_Cors[1])*100\nbarplot(-1*c(((TAD_Cors-TAD_Cors[1])/TAD_Cors[1])*100,((c(PCHC_Cors[-1],ComboCor)-PCHC_Cors[1])/PCHC_Cors[1])*100), ylim=c(0,10), xaxt=\"n\")\n\n\n##Pathway Enrichment\nx<-GeneToPeakDist4(ChIP=ChIP, GTF=GTF, Genes = AllGenes)\nPathways<-read.csv(\"~/Desktop/Dan_Data/Liver_Interactome/ENSEMBL_Path.csv\",row.names=1)\nPathways<-Pathways[,grep(\"REACT\",colnames(Pathways))]\nsave(Pathways, file=\"~/Desktop/ENSEMBL_REACT_Paths.RData\")\n\nFindPathwayEnrichment<-function(distanceFrame, minPathwayGenes, numCores=4){\n  data(\"~/Desktop/ENSEMBL_REACT_Paths.RData\")\n  Pathways<-Pathways[which(row.names(Pathways)%in%x[,1]),]\n  Pathway_Filt<-as.list(Pathways[,which(colSums(Pathways,na.rm=T)>5)])\n  GeneNames<-row.names(Pathways[,which(colSums(Pathways,na.rm=T)>5)])\n  return(unlist(mclapply(Pathway_Filt,function(Path) wilcox.test(x[which(x[,1]%in%GeneNames[which(Path==1)]),2], x[which(!x[,1]%in%GeneNames[which(Path==1)]),2], alternative=\"less\")$p.value,mc.cores = 4)))\n}\n\n",
    "created" : 1494427660163.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2259697404",
    "id" : "470FCF3E",
    "lastKnownWriteTime" : 1494353587,
    "path" : "~/Desktop/GRN_Pred.R",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 4,
    "source_on_save" : false,
    "type" : "r_source"
}